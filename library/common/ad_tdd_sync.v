// ***************************************************************************
// ***************************************************************************
// Copyright 2015(c) Analog Devices, Inc.
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//     - Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     - Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in
//       the documentation and/or other materials provided with the
//       distribution.
//     - Neither the name of Analog Devices, Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//     - The use of this software may or may not infringe the patent rights
//       of one or more patent holders.  This license does not release you
//       from the requirement that you obtain separate licenses from these
//       patent holders to use this software.
//     - Use of the software either in source or binary form, must be run
//       on or directly connected to an Analog Devices Inc. component.
//
// THIS SOFTWARE IS PROVIDED BY ANALOG DEVICES "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE ARE DISCLAIMED.
//
// IN NO EVENT SHALL ANALOG DEVICES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, INTELLECTUAL PROPERTY
// RIGHTS, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ***************************************************************************
// ***************************************************************************
// ***************************************************************************
// ***************************************************************************
`timescale 1ns/1ps

module ad_tdd_sync (

  // clock & reset

  clk,
  rst,

  // control signals

  tdd_sync_en,          // synchronization enabled
  tdd_term_type,        // master or slave
  tdd_enable_in,        // tdd_enable signal asserted by software
  tdd_enable_out,       // synchronized tdd_enable

  // sync interface

  sync_req,             // sync request generated by master
  sync_ack,              // sync acknowledge generated by slave

  // debug
  sync_dbg

);

  input         clk;
  input         rst;

  input         tdd_sync_en;
  input         tdd_term_type;
  input         tdd_enable_in;
  output        tdd_enable_out;

  inout         sync_req;
  inout         sync_ack;

  output  [5:0] sync_dbg;

  reg           tdd_enable_out = 1'b0;
  reg           tdd_enable_synced = 1'b0;
  reg           tdd_enable_d = 1'b0;
  reg           sync_req_i = 1'b0;
  reg           sync_ack_i = 1'b0;

  reg     [2:0] pulse_width = 3'h7;

  wire          sync_ack_o_s;
  wire          sync_req_o_s;
  wire          sync_req_t_s;
  wire          sync_ack_t_s;

  // the sync module can be bypassed

  always @(posedge clk) begin
    if (rst == 1) begin
      tdd_enable_out <= 1'b0;
    end else begin
      tdd_enable_out <= (tdd_sync_en) ? tdd_enable_synced : tdd_enable_in;
    end
  end

  // iobuffers for the syncronization lines

  assign sync_req_t_s = ~tdd_term_type;
  assign sync_ack_t_s = tdd_term_type;

  assign sync_dbg = {sync_ack_i_s,
                     sync_ack_o_s,
                     sync_ack_t_s,
                     sync_req_i,
                     sync_req_o_s,
                     sync_req_t_s};

  ad_iobuf #(
    .DATA_WIDTH(1)
  ) i_sync_req_iobuf (
    .dio_t (sync_req_t_s),
    .dio_i (sync_req_i),
    .dio_o (sync_req_o_s),
    .dio_p (sync_req)
  );

  ad_iobuf #(
    .DATA_WIDTH(1)
  ) i_sync_ack_iobuf (
    .dio_t (sync_ack_i_s),
    .dio_i (sync_ack_i),
    .dio_o (sync_ack_o_s),
    .dio_p (sync_ack)
  );

  always @(posedge clk) begin
    if (rst == 1) begin
      tdd_enable_d <= 1'b0;
      sync_req_i <= 1'b0;
      sync_ack_i <= 1'b0;
      pulse_width <= 3'h7;
    end else begin

      tdd_enable_d <= tdd_enable_in;
      // device is master
      if (tdd_term_type == 1) begin

        if (~tdd_enable_d & tdd_enable_in == 1'b1) begin // generate sync request
          sync_req_i <= 1'b1;
          pulse_width <= 1'b0;
        end else begin
          pulse_width <= (pulse_width < 3'h7) ? pulse_width + 1 : pulse_width;
          sync_req_i <= (pulse_width == 3'h7) ? 1'b0 : 1'b1;
        end

        if (sync_ack_o_s == 1'b1) begin // sync acknowledge arrived
          tdd_enable_synced <= tdd_enable_in;
        end else begin
          tdd_enable_synced <= (tdd_enable_in == 1'b0) ? 1'b0 : tdd_enable_synced;
        end
      // device is slave
      end else begin
        if (sync_req_o_s == 1'b1) begin
          tdd_enable_synced <= tdd_enable_in;
          sync_ack_i <= 1'b1;
        end else begin
          tdd_enable_synced <= (tdd_enable_in == 1'b0) ? 1'b0 : tdd_enable_synced;
          sync_ack_i <= 1'b0;
        end
      end
    end
  end

endmodule
